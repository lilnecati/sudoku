import SwiftUI
import CoreData
import Combine

// TextSizePreference tanımı SudokuApp.swift'e taşındı

struct SettingsView: View {
    @Environment(\.presentationMode) var presentationMode
    @Environment(\.colorScheme) var colorScheme
    
    // App Storage
    @AppStorage("defaultDifficulty") private var defaultDifficulty: String = SudokuBoard.Difficulty.easy.rawValue
    @AppStorage("darkMode") private var darkMode: Bool = false
    @AppStorage("enableHapticFeedback") private var enableHapticFeedback: Bool = true
    @AppStorage("enableSoundEffects") private var enableSoundEffects: Bool = true
    @AppStorage("useSystemAppearance") private var useSystemAppearance: Bool = false
    @AppStorage("textSizePreference") private var textSizeString: String = TextSizePreference.medium.rawValue
    @AppStorage("prefersDarkMode") private var prefersDarkMode: Bool = false
    @AppStorage("powerSavingMode") private var powerSavingMode: Bool = false
    @AppStorage("autoPowerSaving") private var autoPowerSaving: Bool = true
    
    // PowerSavingManager'a erişim
    @StateObject private var powerManager = PowerSavingManager.shared

    
    @State private var username = ""
    @State private var password = ""
    @State private var email = ""
    @State private var name = ""
    @State private var showLoginView = false
    @State private var showRegisterView = false
    @State private var errorMessage = ""
    @State private var showError = false
    @State private var isRefreshing = false
    
    // Mevcut kullanıcı bilgisi
    @State private var currentUser: NSManagedObject? = nil
    
    // Pil simgesini al
    private func getBatteryIcon() -> String {
        let level = powerManager.batteryLevel
        if level <= 0.1 {
            return "battery.0"
        } else if level <= 0.25 {
            return "battery.25"
        } else if level <= 0.5 {
            return "battery.50"
        } else if level <= 0.75 {
            return "battery.75"
        } else {
            return "battery.100"
        }
    }
    
    // Pil rengini al
    private func getBatteryColor() -> Color {
        let level = powerManager.batteryLevel
        if level <= 0.1 {
            return .red
        } else if level <= 0.25 {
            return .orange
        } else {
            return .green
        }
    }
    
    private var textSizePreference: TextSizePreference {
        get {
            return TextSizePreference(rawValue: textSizeString) ?? .medium
        }
        set {
            textSizeString = newValue.rawValue
        }
    }
    
    // Alt bileşenler - derleyici yükünü azaltmak için
    private func profileCircle(initial: String) -> some View {
        ZStack {
            Circle()
                .fill(LinearGradient(
                    gradient: Gradient(colors: [.blue, .purple]),
                    startPoint: .topLeading,
                    endPoint: .bottomTrailing)
                )
                .frame(width: 70, height: 70)
            
            Text(initial)
                .font(.system(size: 30, weight: .bold))
                .foregroundColor(.white)
        }
    }
    
    private func logoutButton(action: @escaping () -> Void) -> some View {
        Button(action: action) {
            HStack {
                Image(systemName: "rectangle.portrait.and.arrow.right")
                    .font(.system(size: 16))
                Text("Çıkış Yap")
                    .font(.system(size: 16, weight: .medium))
            }
            .foregroundColor(.white)
            .frame(maxWidth: .infinity)
            .padding(.vertical, 12)
            .background(
                Color.red
                    .cornerRadius(12)
                    .shadow(color: Color.red.opacity(0.3), radius: 5, x: 0, y: 2)
            )
        }
    }
    
    private func loginButton(action: @escaping () -> Void) -> some View {
        Button(action: action) {
            HStack {
                Image(systemName: "person.fill.badge.plus")
                    .font(.system(size: 16))
                Text("Giriş Yap")
                    .font(.system(size: 16, weight: .medium))
            }
            .foregroundColor(.white)
            .frame(maxWidth: .infinity)
            .padding(.vertical, 14)
            .background(
                Color.blue
                    .cornerRadius(12)
                    .shadow(color: Color.blue.opacity(0.3), radius: 5, x: 0, y: 2)
            )
        }
    }
    
    private func registerButton(action: @escaping () -> Void) -> some View {
        Button(action: action) {
            HStack {
                Image(systemName: "person.badge.plus")
                    .font(.system(size: 16))
                Text("Kayıt Ol")
                    .font(.system(size: 16, weight: .medium))
            }
            .foregroundColor(.blue)
            .frame(maxWidth: .infinity)
            .padding(.vertical, 14)
            .background(
                RoundedRectangle(cornerRadius: 12)
                    .fill(colorScheme == .dark ? Color(UIColor.secondarySystemBackground) : Color.white)
                    .overlay(
                        RoundedRectangle(cornerRadius: 12)
                            .stroke(Color.blue, lineWidth: 1)
                    )
                    .shadow(color: Color.black.opacity(0.05), radius: 5, x: 0, y: 2)
            )
        }
    }
    
    private func websiteLink(url: String, displayText: String) -> some View {
        Link(destination: URL(string: url)!) {
            HStack {
                Image(systemName: "globe")
                Text(displayText)
                Spacer()
                Image(systemName: "arrow.up.right.square")
                    .font(.caption)
            }
            .padding()
            .background(
                RoundedRectangle(cornerRadius: 12)
                    .fill(colorScheme == .dark ? Color(UIColor.secondarySystemBackground) : Color.white)
                    .shadow(color: Color.black.opacity(0.05), radius: 5, x: 0, y: 2)
            )
            .foregroundColor(.primary)
        }
    }
    
    // Tüm ayarları sıfırla
    private func resetAllSettings() {
        enableHapticFeedback = true
        enableSoundEffects = true
        darkMode = false
        useSystemAppearance = false
        textSizeString = TextSizePreference.medium.rawValue
        defaultDifficulty = SudokuBoard.Difficulty.easy.rawValue
        powerSavingMode = false
        autoPowerSaving = true
        
        // PowerSavingManager'ı sıfırla
        powerManager.powerSavingMode = false
        powerManager.autoPowerSaving = true
    }
    
    private func userProfileSection() -> some View {
        if let user = currentUser {
            // Kullanıcı giriş yapmış
            return AnyView(
                VStack(alignment: .leading, spacing: 15) {
                    HStack {
                        profileCircle(initial: String(user.getName().prefix(1)))
                        
                        VStack(alignment: .leading, spacing: 5) {
                            Text(user.getName())
                                .font(.title2)
                                .fontWeight(.bold)
                            
                            Text(user.getUsername())
                                .font(.subheadline)
                                .foregroundColor(.secondary)
                            
                            Text(user.getEmail())
                                .font(.caption)
                                .foregroundColor(.secondary)
                        }
                        
                        Spacer()
                    }
                    .padding()
                    .background(
                        RoundedRectangle(cornerRadius: 16)
                            .fill(colorScheme == .dark ? Color(UIColor.secondarySystemBackground) : Color.white)
                            .shadow(color: Color.black.opacity(0.05), radius: 10, x: 0, y: 5)
                    )
                    
                    logoutButton(action: {
                        PersistenceController.shared.logoutCurrentUser()
                        currentUser = nil
                    })
                }
            )
        } else {
            // Kullanıcı giriş yapmamış
            return AnyView(
                VStack(spacing: 20) {
                    loginButton(action: {
                        showLoginView = true
                    })
                    
                    registerButton(action: {
                        showRegisterView = true
                    })
                }
            )
        }
    }
    
    var body: some View {
        ZStack {
            // Arkaplan
            Color.darkModeBackground(for: colorScheme)
                .ignoresSafeArea()
            
            ScrollView {
                VStack(spacing: 25) {
                    // Başlık
                    Text("Ayarlar")
                        .font(.system(size: 28, weight: .bold, design: .rounded))
                        .padding(.top, 20)
                    
                    // Kullanıcı profili
                    userProfileSection()
                        .padding(.horizontal)
                    
                    // Oyun ayarlar
                    VStack(alignment: .leading, spacing: 8) {
                        Text("Oyun Ayarları")
                            .font(.headline)
                            .padding(.horizontal)
                        
                        gameSettingsView()
                    }
                    
                    // Görünüm ayarlar
                    VStack(alignment: .leading, spacing: 8) {
                        Text("Görünüm Ayarları")
                            .font(.headline)
                            .padding(.horizontal)
                        
                        appearanceSettingsView()
                    }
                    
                    // Hakkında
                    VStack(alignment: .leading, spacing: 8) {
                        Text("Hakkında")
                            .font(.headline)
                            .padding(.horizontal)
                        
                        aboutView()
                    }
                    
                    Spacer()
                        .frame(height: 30)
                }
                .padding(.bottom, 30)
            }
            
            // Kapatma butonu
            VStack {
                HStack {
                    Spacer()
                    
                    Button(action: {
                        presentationMode.wrappedValue.dismiss()
                    }) {
                        Image(systemName: "xmark.circle.fill")
                            .font(.system(size: 28))
                            .foregroundColor(.gray)
                            .padding()
                    }
                }
                Spacer()
            }
        }
        .onAppear {
            // Pil durumunu güncelle
            UIDevice.current.isBatteryMonitoringEnabled = true
            powerSavingMode = powerManager.powerSavingMode
            autoPowerSaving = powerManager.autoPowerSaving
        }
        .sheet(isPresented: $showLoginView) {
            LoginView(isPresented: $showLoginView, currentUser: $currentUser)
        }
        .sheet(isPresented: $showRegisterView) {
            RegisterView(isPresented: $showRegisterView, currentUser: $currentUser)
        }
        .alert(isPresented: $showError) {
            Alert(title: Text("Hata"), message: Text(errorMessage), dismissButton: .default(Text("Tamam")))
        }
        .onAppear {
            // Mevcut kullanıcıyı al
            currentUser = PersistenceController.shared.getCurrentUser()
        }
    }
    
    private func settingsSection<Content: View>(title: String, systemImage: String, @ViewBuilder content: () -> Content) -> some View {
        VStack(alignment: .leading, spacing: 15) {
            // Başlık
            sectionHeader(title: title, systemImage: systemImage)
            
            content()
                .padding()
                .background(
                    backgroundRectangle()
                )
        }
    }
    
    private func backgroundRectangle(cornerRadius: CGFloat = 12) -> some View {
        RoundedRectangle(cornerRadius: cornerRadius)
            .fill(colorScheme == .dark ? Color(UIColor.secondarySystemBackground) : Color.white)
            .shadow(color: Color.black.opacity(0.05), radius: 5, x: 0, y: 2)
    }
    
    private func settingRowBackground() -> some View {
        RoundedRectangle(cornerRadius: 12)
            .fill(colorScheme == .dark ? Color(UIColor.tertiarySystemBackground) : Color.white)
    }
    
    private func sectionHeader(title: String, systemImage: String) -> some View {
        HStack {
            Image(systemName: systemImage)
                .font(.system(size: 18, weight: .medium))
                .foregroundColor(.blue)
                .frame(width: 30, height: 30)
                .background(
                    RoundedRectangle(cornerRadius: 8)
                        .fill(Color.blue.opacity(0.1))
                )
            
            Text(title)
                .font(.system(size: 20, weight: .bold, design: .rounded))
            
            Spacer()
        }
        .padding(.leading, 8)
    }
    
    private func gameSettingsView() -> some View {
        VStack(spacing: 5) {
            // Varsayılan zorluk
            HStack {
                Text("Varsayılan Zorluk")
                Spacer()
                Menu {
                    Button("Kolay") { defaultDifficulty = SudokuBoard.Difficulty.easy.rawValue }
                    Button("Orta") { defaultDifficulty = SudokuBoard.Difficulty.medium.rawValue }
                    Button("Zor") { defaultDifficulty = SudokuBoard.Difficulty.hard.rawValue }
                    Button("Çok Zor") { defaultDifficulty = SudokuBoard.Difficulty.expert.rawValue }
                } label: {
                    Text(defaultDifficulty)
                        .padding(.vertical, 5)
                        .padding(.horizontal, 10)
                        .background(
                            RoundedRectangle(cornerRadius: 8)
                                .fill(Color.blue.opacity(0.1))
                        )
                        .foregroundColor(.primary)
                }
            }
            .padding()
            .background(
                RoundedRectangle(cornerRadius: 12)
                    .fill(colorScheme == .dark ? Color(UIColor.secondarySystemBackground) : Color.white)
                    .shadow(color: Color.black.opacity(0.05), radius: 5, x: 0, y: 2)
            )
            
            // Titreşim geri bildirimi
            HStack {
                Text("Titreşim Geri Bildirimi")
                Spacer()
                Button(action: {
                    enableHapticFeedback.toggle()
                }) {
                    Image(systemName: enableHapticFeedback ? "checkmark.circle.fill" : "circle")
                        .foregroundColor(enableHapticFeedback ? .blue : .gray)
                        .font(.system(size: 24))
                }
            }
            .padding()
            .background(
                RoundedRectangle(cornerRadius: 12)
                    .fill(colorScheme == .dark ? Color(UIColor.secondarySystemBackground) : Color.white)
                    .shadow(color: Color.black.opacity(0.05), radius: 5, x: 0, y: 2)
            )
            
            // Ses efektleri
            HStack {
                Text("Ses Efektleri")
                Spacer()
                Button(action: {
                    enableSoundEffects.toggle()
                }) {
                    Image(systemName: enableSoundEffects ? "checkmark.circle.fill" : "circle")
                        .foregroundColor(enableSoundEffects ? .blue : .gray)
                        .font(.system(size: 24))
                }
            }
            .padding()
            .background(
                RoundedRectangle(cornerRadius: 12)
                    .fill(colorScheme == .dark ? Color(UIColor.secondarySystemBackground) : Color.white)
                    .shadow(color: Color.black.opacity(0.05), radius: 5, x: 0, y: 2)
            )
            
            // Güç tasarrufu modu
            HStack {
                VStack(alignment: .leading, spacing: 4) {
                    Text("Güç Tasarrufu Modu")
                    Text("Animasyonları ve görsel efektleri azaltır")
                        .font(.caption)
                        .foregroundColor(.gray)
                }
                Spacer()
                Button(action: {
                    powerSavingMode.toggle()
                    // PowerSavingManager'ı güncelle
                    powerManager.powerSavingMode = powerSavingMode
                }) {
                    Image(systemName: powerSavingMode ? "checkmark.circle.fill" : "circle")
                        .foregroundColor(powerSavingMode ? .green : .gray)
                        .font(.system(size: 24))
                }
            }
            .padding()
            .background(
                RoundedRectangle(cornerRadius: 12)
                    .fill(colorScheme == .dark ? Color(UIColor.secondarySystemBackground) : Color.white)
                    .shadow(color: Color.black.opacity(0.05), radius: 5, x: 0, y: 2)
            )
            
            // Otomatik güç tasarrufu
            HStack {
                VStack(alignment: .leading, spacing: 4) {
                    Text("Otomatik Güç Tasarrufu")
                    Text("Pil seviyesi düşükken otomatik olarak etkinleşir")
                        .font(.caption)
                        .foregroundColor(.gray)
                }
                Spacer()
                Button(action: {
                    autoPowerSaving.toggle()
                    // PowerSavingManager'ı güncelle
                    powerManager.autoPowerSaving = autoPowerSaving
                }) {
                    Image(systemName: autoPowerSaving ? "checkmark.circle.fill" : "circle")
                        .foregroundColor(autoPowerSaving ? .green : .gray)
                        .font(.system(size: 24))
                }
            }
            .padding()
            .background(
                RoundedRectangle(cornerRadius: 12)
                    .fill(colorScheme == .dark ? Color(UIColor.secondarySystemBackground) : Color.white)
                    .shadow(color: Color.black.opacity(0.05), radius: 5, x: 0, y: 2)
            )
            
            // Pil durumu göstergesi
            HStack {
                Image(systemName: powerManager.isCharging ? "battery.100.bolt" : getBatteryIcon())
                    .foregroundColor(getBatteryColor())
                    .font(.system(size: 20))
                
                VStack(alignment: .leading, spacing: 4) {
                    Text("Pil Durumu: %\(Int(powerManager.batteryLevel * 100))")
                    if powerManager.isCharging {
                        Text("Şarj Oluyor")
                            .font(.caption)
                            .foregroundColor(.green)
                    } else if powerManager.batteryLevel <= 0.2 {
                        Text("Düşük Pil")
                            .font(.caption)
                            .foregroundColor(.red)
                    }
                }
                
                Spacer()
                
                if powerManager.batteryLevel <= 0.2 && !powerSavingMode {
                    Button(action: {
                        powerSavingMode = true
                        powerManager.powerSavingMode = true
                    }) {
                        Text("Güç Tasarrufunu Etkinleştir")
                            .font(.caption)
                            .padding(.horizontal, 10)
                            .padding(.vertical, 5)
                            .background(Color.green.opacity(0.2))
                            .cornerRadius(8)
                            .foregroundColor(.green)
                    }
                }
            }
            .padding()
            .background(
                RoundedRectangle(cornerRadius: 12)
                    .fill(colorScheme == .dark ? Color(UIColor.secondarySystemBackground) : Color.white)
                    .shadow(color: Color.black.opacity(0.05), radius: 5, x: 0, y: 2)
            )
        }
        .padding(.horizontal)
    }
    
    private func appearanceSettingsView() -> some View {
        VStack(spacing: 5) {
            // Sistem görünümünü kullan
            HStack {
                Text("Sistem Görünümünü Kullan")
                Spacer()
                Toggle("", isOn: $useSystemAppearance)
                    .labelsHidden()
                    .toggleStyle(SwitchToggleStyle(tint: .blue))
            }
            .padding()
            .background(
                RoundedRectangle(cornerRadius: 12)
                    .fill(colorScheme == .dark ? Color(UIColor.secondarySystemBackground) : Color.white)
                    .shadow(color: Color.black.opacity(0.05), radius: 5, x: 0, y: 2)
            )
            
            // Karanlık mod
            if !useSystemAppearance {
                HStack {
                    Text("Karanlık Mod")
                    Spacer()
                    Toggle("", isOn: $darkMode)
                        .labelsHidden()
                        .toggleStyle(SwitchToggleStyle(tint: .blue))
                }
                .padding()
                .background(
                    RoundedRectangle(cornerRadius: 12)
                        .fill(colorScheme == .dark ? Color(UIColor.secondarySystemBackground) : Color.white)
                        .shadow(color: Color.black.opacity(0.05), radius: 5, x: 0, y: 2)
                )
            }
            
            // Metin boyutu
            VStack(alignment: .leading, spacing: 8) {
                Text("Metin Boyutu")
                
                HStack(spacing: 15) {
                    Button(action: {
                        textSizeString = TextSizePreference.small.rawValue
                    }) {
                        Text("Küçük")
                            .padding(.vertical, 8)
                            .padding(.horizontal, 12)
                            .background(
                                RoundedRectangle(cornerRadius: 8)
                                    .fill(textSizeString == TextSizePreference.small.rawValue ? Color.blue.opacity(0.2) : Color.clear)
                                    .overlay(
                                        RoundedRectangle(cornerRadius: 8)
                                            .stroke(textSizeString == TextSizePreference.small.rawValue ? Color.blue : Color.gray.opacity(0.3), lineWidth: 1)
                                    )
                            )
                            .foregroundColor(textSizeString == TextSizePreference.small.rawValue ? .blue : .primary)
                    }
                    
                    Button(action: {
                        textSizeString = TextSizePreference.medium.rawValue
                    }) {
                        Text("Orta")
                            .padding(.vertical, 8)
                            .padding(.horizontal, 12)
                            .background(
                                RoundedRectangle(cornerRadius: 8)
                                    .fill(textSizeString == TextSizePreference.medium.rawValue ? Color.blue.opacity(0.2) : Color.clear)
                                    .overlay(
                                        RoundedRectangle(cornerRadius: 8)
                                            .stroke(textSizeString == TextSizePreference.medium.rawValue ? Color.blue : Color.gray.opacity(0.3), lineWidth: 1)
                                    )
                            )
                            .foregroundColor(textSizeString == TextSizePreference.medium.rawValue ? .blue : .primary)
                    }
                    
                    Button(action: {
                        textSizeString = TextSizePreference.large.rawValue
                    }) {
                        Text("Büyük")
                            .padding(.vertical, 8)
                            .padding(.horizontal, 12)
                            .background(
                                RoundedRectangle(cornerRadius: 8)
                                    .fill(textSizeString == TextSizePreference.large.rawValue ? Color.blue.opacity(0.2) : Color.clear)
                                    .overlay(
                                        RoundedRectangle(cornerRadius: 8)
                                            .stroke(textSizeString == TextSizePreference.large.rawValue ? Color.blue : Color.gray.opacity(0.3), lineWidth: 1)
                                    )
                            )
                            .foregroundColor(textSizeString == TextSizePreference.large.rawValue ? .blue : .primary)
                    }
                }
            }
            .padding()
            .background(
                RoundedRectangle(cornerRadius: 12)
                    .fill(colorScheme == .dark ? Color(UIColor.secondarySystemBackground) : Color.white)
                    .shadow(color: Color.black.opacity(0.05), radius: 5, x: 0, y: 2)
            )
        }
        .padding(.horizontal)
    }
    
    private func aboutView() -> some View {
        VStack(spacing: 5) {
            // Uygulama bilgisi
            VStack(alignment: .leading, spacing: 8) {
                HStack {
                    Image(systemName: "info.circle.fill")
                        .foregroundColor(.blue)
                    Text("Uygulama Bilgisi")
                        .font(.headline)
                }
                
                VStack(alignment: .leading, spacing: 4) {
                    Text("Sudoku")
                        .font(.title3.bold())
                    
                    Text("Sürüm 1.0.0")
                        .font(.subheadline)
                        .foregroundColor(.secondary)
                    
                    Text("Bu uygulama Swift ve SwiftUI kullanarak geliştirilmiştir.")
                        .font(.caption)
                        .foregroundColor(.secondary)
                        .padding(.top, 2)
                    
                    Text("Geliştirici: Necati Yıldırım")
                        .font(.caption)
                        .foregroundColor(.secondary)
                        .padding(.top, 2)
                }
            }
            .padding()
            .background(
                RoundedRectangle(cornerRadius: 12)
                    .fill(colorScheme == .dark ? Color(UIColor.secondarySystemBackground) : Color.white)
                    .shadow(color: Color.black.opacity(0.05), radius: 5, x: 0, y: 2)
            )
            
            // İletişim
            Button(action: {
                // E-posta uygulamasını aç
                if let url = URL(string: "mailto:necatideveloper@gmail.com") {
                    UIApplication.shared.open(url)
                }
            }) {
                HStack {
                    Image(systemName: "envelope.fill")
                        .foregroundColor(.blue)
                    Text("İletişim")
                        .font(.headline)
                    Spacer()
                    Text("necatiyildirim@gmail.com")
                        .foregroundColor(.secondary)
                    Image(systemName: "chevron.right")
                        .font(.caption)
                        .foregroundColor(.secondary)
                }
                .padding()
                .background(
                    RoundedRectangle(cornerRadius: 12)
                        .fill(colorScheme == .dark ? Color(UIColor.secondarySystemBackground) : Color.white)
                        .shadow(color: Color.black.opacity(0.05), radius: 5, x: 0, y: 2)
                )
            }
            .buttonStyle(PlainButtonStyle())
            
            // Gizlilik Politikası
            Button(action: {
                // Web sitesini aç
                if let url = URL(string: "https://www.sudokuapp.com/privacy") {
                    UIApplication.shared.open(url)
                }
            }) {
                HStack {
                    Image(systemName: "lock.shield.fill")
                        .foregroundColor(.blue)
                    Text("Gizlilik Politikası")
                        .font(.headline)
                    Spacer()
                    Image(systemName: "chevron.right")
                        .font(.caption)
                        .foregroundColor(.secondary)
                }
                .padding()
                .background(
                    RoundedRectangle(cornerRadius: 12)
                        .fill(colorScheme == .dark ? Color(UIColor.secondarySystemBackground) : Color.white)
                        .shadow(color: Color.black.opacity(0.05), radius: 5, x: 0, y: 2)
                )
            }
            .buttonStyle(PlainButtonStyle())
        }
        .padding(.horizontal)
    }
    
    private func appInfoRow(title: String, value: String) -> some View {
        HStack {
            Text(title)
                .foregroundColor(.secondary)
            Spacer()
            Text(value)
                .fontWeight(.medium)
        }
        .padding()
        .background(
            RoundedRectangle(cornerRadius: 12)
                .fill(colorScheme == .dark ? Color(UIColor.tertiarySystemBackground) : Color.white)
                .shadow(color: Color.black.opacity(0.03), radius: 5, x: 0, y: 2)
        )
    }
}

struct SettingRow<Content: View>: View {
    var title: String
    @ViewBuilder var content: () -> Content
    
    @Environment(\.colorScheme) var colorScheme
    
    var body: some View {
        HStack {
            Text(title)
                .foregroundColor(.primary)
            
            Spacer()
            
            content()
        }
        .padding()
        .background(
            RoundedRectangle(cornerRadius: 12)
                .fill(colorScheme == .dark ? Color(UIColor.tertiarySystemBackground) : Color.white)
                .shadow(color: Color.black.opacity(0.03), radius: 5, x: 0, y: 2)
        )
    }
}
